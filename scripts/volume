#!/usr/bin/env bash
# Refactored i3blocks volume script
# === CONFIGURATION DETECTION ===
detect_mixer() {
  local mixer="default"
  if command -v pulseaudio >/dev/null && pulseaudio --check; then
    amixer -D pulse info >/dev/null 2>&1 && mixer="pulse"
  fi
  lsmod | grep -q jack && mixer="jackplug"
  echo "${2:-$mixer}"
}
detect_scontrol() {
  local mixer="$1"
  amixer -D "$mixer" scontrols |
    sed -n "s/Simple mixer control '\([^']*\)',0/\1/p" |
    head -n1
}
capability() {
  amixer "$AMIXER_PARAMS" -D "$MIXER" get "$SCONTROL" |
    grep -q "Capabilities:.*cvolume" && echo "Capture"
}
get_volume() {
  amixer "$AMIXER_PARAMS" -D "$MIXER" get "$SCONTROL" "$(capability)"
}
format_volume() {
  local volume_output="$1"
  local label="${LABEL:-}"
  local percent mute val output
  
  # Debug: Output to a log file to see what we're getting
  echo "VOLUME OUTPUT: $volume_output" >> /tmp/volume_debug.log
  
  # More flexible regex pattern to match different amixer formats
  if [[ "$volume_output" =~ \[([0-9]+%)\] ]]; then
    percent="${BASH_REMATCH[1]}"
    
    # Check if mute status is available
    if [[ "$volume_output" =~ \[(on|off)\] ]]; then
      mute="${BASH_REMATCH[1]}"
      output=$([[ "$mute" == "off" ]] && echo "MUTE" || echo "$percent")
    else
      # No mute status found, just show volume
      output="$percent"
    fi
    
    echo "${label}${output}"
  else
    # Get a default volume using a different method if regex fails
    default_vol=$(amixer -D "$MIXER" get Master | grep -oE '[0-9]+%' | head -n1)
    if [[ -n "$default_vol" ]]; then
      echo "${label}${default_vol}"
    else
      # Last resort fallback - empty string instead of question mark
      echo "${label}"
    fi
  fi
}
# === INITIAL SETUP ===
MIXER="${MIXER:-$(detect_mixer "$2")}"
SCONTROL="${SCONTROL:-${BLOCK_INSTANCE:-$(detect_scontrol "$MIXER")}}"
STEP="${STEP:-${1:-5%}}"
AMIXER_PARAMS=$([[ "${NATURAL_MAPPING:-0}" != "0" ]] && echo "-M" || echo "")
# === BUTTON ACTIONS ===
case $BLOCK_BUTTON in
  3) amixer "$AMIXER_PARAMS" -q -D "$MIXER" sset "$SCONTROL" "$(capability)" toggle ;;
  4) amixer "$AMIXER_PARAMS" -q -D "$MIXER" sset "$SCONTROL" "$(capability)" "$STEP+" unmute ;;
  5) amixer "$AMIXER_PARAMS" -q -D "$MIXER" sset "$SCONTROL" "$(capability)" "$STEP-" unmute ;;
esac
# === OUTPUT ===
volume_output=$(get_volume)

# Verify we got some output before processing
if [[ -z "$volume_output" ]]; then
  # If get_volume returned nothing, try direct fallback method
  volume_output=$(amixer -D "$MIXER" get Master 2>/dev/null || echo "")
fi

format_volume "$volume_output"
